{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "id": "https://raw.githubusercontent.com/miketrethewey/sm-json-data/master/schema/m3-region.schema.json",

  "definitions": {
    "note": {
      "type": ["string", "array"],
      "title": "Note field",
      "description": "Additional details or explanations, intended for human readers.",
      "default": "",
      "pattern": "^(.*)$"
    },
    "logicalRequirements": {
      "type": [
        "array",
        "null"
      ],
      "title": "Logical Requirements",
      "description": "A logical condition that takes the form of equipment, tech, and flag requirements.",
      "items": {
        "$id": "#/definitions/logicalRequirements/items",
        "type": [
          "object",
          "string"
        ],
        "title": "Logical element",
        "description": "Elements are assumed to be ANDed together, except when inside an OR object.",
        "minProperties": 1,
        "maxProperties": 1,
        "additionalProperties": false,
        "properties": {
          "and": {
            "$ref" : "#definitions/logicalRequirements",
            "title": "AND Logical Element",
            "description": "Fulfilled if all logical elements inside are fulfilled."
          },
          "or": {
            "$ref" : "#definitions/logicalRequirements",
            "title": "OR Logical Element",
            "description": "Fulfilled if at least one logical element inside is fulfilled."
          },
          "ammo": {
            "$id": "#/definitions/logicalRequirement/items/properties/ammo",
            "type": "object",
            "title": "Ammo Requirement",
            "description": "Fulfilled by spending ammo",
            "required": [
              "type",
              "count"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammo/properties/type",
                "type": "string",
                "enum": [
                  "Missile",
                  "Super",
                  "PowerBomb"
                ],
                "title": "Ammo Type",
                "description": "The type of ammo that must be spent"
              },
              "count": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammo/properties/count",
                "type": "integer",
                "minimum": 1,
                "title": "Ammo Count",
                "description": "The amount of ammo that must be spent."
              }
            }
          },
          "ammoDrain": {
            "$id": "#/definitions/logicalRequirement/items/properties/ammoDrain",
            "type": "object",
            "title": "Ammo Drain Cost",
            "description": "Always fulfilled, but if the ammo is present, it will be drained.",
            "required": [
              "type",
              "count"
            ],
            "additionalProperties": false,
            "properties": {
              "type": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammoDrain/properties/type",
                "type": "string",
                "enum": [
                  "Missile",
                  "Super",
                  "PowerBomb"
                ],
                "title": "Ammo Type",
                "description": "The type of ammo that can be drained"
              },
              "count": {
                "$id": "#/definitions/logicalRequirement/items/properties/ammoDrain/properties/count",
                "type": "integer",
                "minimum": 1,
                "title": "Ammo Count",
                "description": "The amount of ammo that can be drained."
              }
            }
          },
          "enemyKill": {
            "$id": "#/definitions/logicalRequirement/items/properties/enemyKill",
            "type": "object",
            "title": "Enemy Kill",
            "description": "Describes the need to be able to kill a set of enemies. By default, allows all non-situational weapons (provided they can damage the enemies)",
            "required": ["enemies"],
            "additionalProperties": false,
            "properties": {
              "enemies": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/enemies",
                "type": "array",
                "title": "Enemy Groups",
                "description": "An array of enemy groups that must be killed. All enemies in each group can be hit by the same attack from an area of effect weapon.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/enemies/items",
                  "type": "array",
                  "title": "Enemy Group",
                  "description": "A single group of enemies that can be hit by the same attack from an area of effect weapon.",
                  "items": {
                    "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/enemies/items/items",
                    "type": "string",
                    "title": "Enemy Name",
                    "description": "The name of an enemy, as found in the enemies file or the boss file."
                  }
                }
              },
              "explicitWeapons": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/explicitWeapons",
                "type": "array",
                "title": "Explicit Weapons",
                "description": "A list of weapons. If present, this list defines the only weapons that can be used to fulfill the EnemyKill logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/explicitWeapons/items",
                  "type": "string",
                  "title": "Weapon Name",
                  "description": "The name of a weapon, as found in the weapons file."
                }
              },
              "excludedWeapons": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/excludedWeapons",
                "type": "array",
                "title": "Excluded Weapons",
                "description": "A list of weapons. If present, this list defines weapons that cannot be used to fulfill this EnemyKill logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/excludedWeapons/items",
                  "type": "string",
                  "title": "Weapon Name",
                  "description": "The name of a weapon, as found in the weapons file."
                }
              },
              "farmableAmmo": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/farmableAmmo",
                "type": "array",
                "title": "Farmable Ammo",
                "description": "A list of ammo types that are considered farmable during this enemy kill. It voids all ammo costs for that type, unless superseded by a boss scenario.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/enemyKill/properties/farmableAmmo/items",
                  "type": "string",
                  "title": "Ammo Type",
                  "description": "The name of an ammo type, which won't get spent (unless superseded by a boss scenario)."
                }
              }
            }
          },
          "acidFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/acidFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Acid Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in acid."
          },
          "draygonElectricityFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/draygonElectricityFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Draygon Electricity Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames grapples to a broken Draygon turret."
          },
          "enemyDamage": {
            "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage",
            "type": "object",
            "title": "Enemy Dammage",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from an enemy.",
            "required": [
              "enemy",
              "type",
              "hits"
            ],
            "additionalProperties": false,
            "properties": {
              "enemy": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage/properties/enemy",
                "type": "string",
                "title": "Enemy Name",
                "description": "The name of an enemy that damage must be taken from, as found in the enemies file."
              },
              "type": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage/properties/type",
                "type": "string",
                "title": "Attack Type",
                "description": "The name of the enemy attack that damage must be taken from, as found in the enemy's list of attacks (in the enemies file)."
              },
              "hits": {
                "$id": "#/definitions/logicalRequirement/items/properties/enemyDamage/properties/hits",
                "type": "integer",
                "minimum": 1,
                "title": "Number of Hits",
                "description": "The number of hits that must be taken."
              }
            }
          },
          "heatFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/heatFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Heat Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in a heat room."
          },
          "hibashiHits": {
            "$id": "#/definitions/logicalRequirement/items/properties/hibashiHits",
            "type": "integer",
            "minimum": 1,
            "title": "Hibashi Hits",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from Norfair flame pillars (called Hibashi)."
          },
          "lavaFrames": {
            "$id": "#/definitions/logicalRequirement/items/properties/lavaFrames",
            "type": "integer",
            "minimum": 1,
            "title": "Lava Frames",
            "description": "Fulfilled by spending an amount of energy that corresponds to spending a number of frames in lava."
          },
          "energyAtMost": {
            "$id": "#/definitions/logicalRequirement/items/properties/energyAtMost",
            "type": "integer",
            "minimum": 1,
            "title": "Energy at Most",
            "description": "Fulfilled by having Samus' energy drop to a maximum of this value, regardless of how much she had coming in."
          },
          "spikeHits": {
            "$id": "#/definitions/logicalRequirement/items/properties/spikeHits",
            "type": "integer",
            "minimum": 1,
            "title": "Spike Hits",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from spikes."
          },
          "thornHits": {
            "$id": "#/definitions/logicalRequirement/items/properties/thornHits",
            "type": "integer",
            "minimum": 1,
            "title": "Thorn Hits",
            "description": "Fulfilled by spending an amount of energy that corresponds to taking a number of hits from thorns (the less damaging spikes found mainly in Brinstar)."
          },
          "adjacentRunway": {
            "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway",
            "type": "object",
            "title": "Adjacent Runway",
            "description": "Fulfilled by being able to come in via a specific door, if the door in the adjacent room has a runway that fulfills the other properties of this logical element.",
            "required": [
              "fromNode",
              "usedTiles"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNode": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/fromNode",
                "type": "integer",
                "title": "From Node",
                "description": "The in-room ID of the node through which the adjacent runway must be accessed."
              },
              "usedTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/adjacentRunway/properties/usedTiles",
                "type": "integer",
                "title": "Used Tiles",
                "description": "The number of tiles the runway in the adjacent room must have."
              }
            }
          },
          "canComeInCharged": {
            "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged",
            "type": "object",
            "title": "Can Come in Charged",
            "description": "Fulfilled by being able to come into the room via a specific door, with a shinespark charge that has at least a number of frames remaining.",
            "required": [
              "fromNode",
              "framesRemaining",
              "shinesparkFrames"
            ],
            "additionalProperties": false,
            "properties": {
              "fromNode": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/fromNode",
                "type": "integer",
                "title": "From Node",
                "description": "The in-room ID of the node through which a shinespark charge must be carried."
              },
              "framesRemaining": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/framesRemaining",
                "type": "integer",
                "minimum": 0,
                "maximum": 180,
                "title": "Frames Remaining",
                "description": "The number of frames that must be left on the shinespark charge when coming in."
              },
              "shinesparkFrames": {
                "$id": "#/definitions/logicalRequirement/items/properties/canComeInCharged/properties/shinesparkFrames",
                "type": "integer",
                "minimum": 0,
                "title": "Shinespark Frames",
                "description": "The duration (in frames) of the shinespark that must be executed. This defines the energy cost of the shinespark."
              }
            }
          },
          "canShineCharge": {
            "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge",
            "type": "object",
            "title": "Can Shine Charge",
            "description": "Fulfilled by being able to charge a shinespark under the described conditions.",
            "required": [
              "usedTiles",
              "openEnd",
              "shinesparkFrames"
            ],
            "additionalProperties": false,
            "properties": {
              "usedTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/usedTiles",
                "type": "integer",
                "minimum": 1,
                "maximum": 31,
                "title": "Used Tiles",
                "description": "The number of contiguous tiles that are available to charge a shinespark."
              },
              "gentleUpTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/gentleUpTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Gentle Up Tiles",
                "description": "The number of tiles that slope gently upward (going up by half a tile)."
              },
              "gentleDownTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/gentleDownTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Gentle Down Tiles",
                "description": "The number of tiles that slope gently downward (going down by half a tile)."
              },
              "steepUpTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/steepUpTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Steep Up Tiles",
                "description": "The number of tiles that slope steeply upward (going up by a tile)."
              },
              "steepDownTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/steepDownTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Steep Down Tiles",
                "description": "The number of tiles that slope steeply downward (going down by a tile)."
              },
              "startingDownTiles": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/startingDownTiles",
                "type": "integer",
                "minimum": 0,
                "title": "Starting Down Tiles",
                "description": "The number of tiles that slope downwards at the start of a run, preventing the execution of a stutter."
              },
              "openEnd": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/openEnd",
                "type": "integer",
                "minimum": 0,
                "maximum": 2,
                "title": "Number of Open Ends",
                "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room."
              },
              "shinesparkFrames": {
                "$id": "#/definitions/logicalRequirement/items/properties/canShineCharge/properties/shinesparkFrames",
                "type": "integer",
                "minimum": 0,
                "title": "Shinespark Frames",
                "description": "The duration (in frames) of the shinespark that must be executed. This defines the energy cost of the shinespark."
              }
            }
          },
          "previousStratProperty": {
            "$id": "#/definitions/logicalRequirement/items/properties/previousStratProperty",
            "type": "string",
            "title": "Previous Strat Property",
            "description": "Fulfilled if the player arrived to the current node via a strat that had a given stratProperty."
          },
          "resetRoom": {
            "$id": "#/definitions/logicalRequirement/items/properties/resetRoom",
            "type": "object",
            "title": "Reset Room",
            "description": "Fulfilled by able to enter the room in a specified node, and avoid visiting barred nodes and destroying barred obstacles.",
            "required": [
              "nodes"
            ],
            "anyOf": [
              {
                "oneOf": [
                  {
                    "required": ["mustStayPut"]
                  },
                  {
                    "required": ["nodesToAvoid"]
                  }
                ]
              },
              {
                "required": ["obstaclesToAvoid"]
              }
            ],
            "additionalProperties": false,
            "properties": {
              "nodes": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodes",
                "type": "array",
                "title": "Nodes",
                "description": "The list of nodes from which entering the room is required to fulfill this logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodes/items",
                  "type": "integer",
                  "title": "Node ID",
                  "description": "The in-room ID of a node."
                }
              },
              "nodesToAvoid": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodesToAvoid",
                "type": "array",
                "title": "Nodes to Avoid",
                "description": "The list of nodes that must not have been visited since entering the room in order to fulfill this logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/nodesToAvoid/items",
                  "type": "integer",
                  "title": "Node ID",
                  "description": "The in-room ID of a node."
                }
              },
              "obstaclesToAvoid": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/obstaclesToAvoid",
                "type": "array",
                "title": "Obstacles to Avoid",
                "description": "The list of obstacles that must not have been destroyed since entering the room in order to fulfill this logical element.",
                "items": {
                  "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/obstaclesToAvoid/items",
                  "type": "string",
                  "title": "Obstacle ID",
                  "description": "The in-room ID of an obstacle."
                }
              },
              "mustStayPut": {
                "$id": "#/definitions/logicalRequirement/items/properties/resetRoom/properties/mustStayPut",
                "type": "boolean",
                "title": "Must Stay Put",
                "description": "Indicates that no other node but the entry node may be visited in order to fulfill this logical element. Must not be defined when it is intended to be false, unless there are no nodes or obstacles to avoid."
              }
            }
          }
        }
      }
    },

    "strat": {
      "type": "object",
      "required": [
        "name",
        "notable",
        "requires"
      ],
      "additionalProperties": false,
      "properties": {
        "name": {
          "$id": "#/definitions/strat/items/properties/name",
          "type": "string",
          "title": "Strat Name",
          "description": "A name for the strat",
          "default": "Base",
          "examples": [
            "Base",
            "Brinstar Reserve Hole-in-one"
          ],
          "pattern": "^(.*)$"
        },
        "notable": {
          "$id": "#/definitions/strat/properties/notable",
          "type": "boolean"
        },
        "requires": {
          "$ref" : "#/definitions/logicalRequirements",
          "title": "Strat Requirements",
          "description": "Equipment, tech, and flag requirements to execute this strat."
        },
        "obstacles": {
          "$id": "#/definitions/strat/items/properties/obstacles",
          "type": "array",
          "title": "Strat obstacles",
          "description": "An array of obstacles that must be destroyed (during the strat or previously) for the strat to be successfully executed.",
          "items": {
            "$id": "#/definitions/strat/properties/obstacles/items",
            "type": "object",
            "required": [
              "id",
              "requires"
            ],
            "additionalProperties": false,
            "properties": {
              "id": {
                "$id": "#/definitions/strat/properties/obstacles/items/properties/id",
                "type": "string",
                "title": "Obstacle ID",
                "description": "The ID of the obstacle that must be destroyed.",
                "default": "",
                "examples": ["A", "B"],
                "pattern": "^(.*)$"
              },
              "requires": {
                "$ref" : "#/definitions/logicalRequirements",
                "$id": "#/definitions/strat/properties/obstacles/items/properties/requires",
                "title": "Obstacle Requirements",
                "description": "Equipment, tech, and flag requirements to destroy this obstacle, on top of requirements defined on the obstacle itself (does not apply if obstacle already destroyed since entering the room)."
              },
              "bypass": {
                "$ref" : "#/definitions/logicalRequirements",
                "$id": "#/definitions/strat/properties/obstacles/items/properties/bypass",
                "title": "Obstacle Bypass Requirements",
                "description": "Equipment, tech, and flag requirements to bypass this obstacle instead of destroying it."
              },
              "additionalObstacles": {
                "$id": "#/definitions/strat/properties/obstacles/items/properties/additionalObstacles",
                "type": "array",
                "title": "Additional obstacles",
                "description": "The IDs of obstacles that are simultaneously destroyed if the containing obstacle is destroyed via this strat.",
                "items": {
                  "type": "string",
                  "pattern": "^(.*)$"
                }
              },
              "note": {
                "$ref" : "#definitions/note"
              }
            }
          }
        },
        "stratProperties": {
          "$id": "#/definitions/strat/properties/stratProperties",
          "type": "array",
          "title": "Strat Properties",
          "description": "A list of strat properties this strat has, which may impact what is doable once the strat's destination is reached.",
          "examples": ["spinjump"],
          "items": {
            "$id": "#/definitions/strat/properties/stratProperties/items",
            "type": "string",
            "title": "Strat Property",
            "description": "An individual property of the strat."
          }
        },
        "note": {
          "$ref" : "#definitions/note"
        }
      }
    }
  },


  "type": "object",
  "title": "Super Metroid Room Schema",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "title": "JSON Schema Path",
      "description": "A path to the definition of this file's JSON schema."
    },
    "rooms": {
      "type": "array",
      "items": {
        "$id": "#/items",
        "type": "object",
        "title": "Room Object",
        "description": "An object that describes one room in Super Metroid",
        "required": [
          "id",
          "name",
          "area",
          "subarea",
          "nodes",
          "links"
        ],
        "additionalProperties": false,
        "properties": {
          "id": {
            "$id": "#/items/properties/id",
            "type": "integer",
            "title": "Room ID",
            "description": "Identifier for this room, unique across the entire game",
            "default": 0,
            "examples": [
              7
            ]
          },
          "name": {
            "$id": "#/items/properties/name",
            "type": "string",
            "title": "Room Name",
            "description": "As it appears in the SuperMetroid.run wiki",
            "default": "",
            "examples": [
              "Morphing Ball Room"
            ],
            "pattern": "^(.*)$"
          },
          "area": {
            "$id": "#/items/properties/area",
            "type": "string",
            "title": "Area Name",
            "default": "",
            "examples": [
              "Brinstar"
            ],
            "pattern": "^(.*)$"
          },
          "subarea": {
            "$id": "#/items/properties/subarea",
            "type": "string",
            "title": "Area Subname",
            "default": "",
            "examples": [
              "Blue"
            ],
            "pattern": "^(.*)$"
          },
          "note": {
            "$ref" : "#definitions/note"
          },
          "roomAddress": {
            "$id": "#/items/properties/roomAddress",
            "type": "string",
            "title": "Room Address",
            "description": "Memory address of this room.",
            "examples": ["0x79E9F", "0x79F11"],
            "pattern": "^(.*)$"
          },
          "nodes": {
            "$id": "#/items/properties/nodes",
            "type": "array",
            "title": "Nodes; Doors, Elevators, Item Locations, etc",
            "items": {
              "$id": "#/items/properties/nodes/items",
              "type": "object",
              "title": "Node Object",
              "required": [
                "id",
                "name",
                "nodeType",
                "nodeSubType",
                "locks"
              ],
              "additionalProperties": false,
              "properties": {
                "id": {
                  "$id": "#/items/properties/nodes/items/properties/id",
                  "type": "integer",
                  "title": "Node ID within Room",
                  "default": 0,
                  "examples": [
                    1
                  ]
                },
                "name": {
                  "$id": "#/items/properties/nodes/items/properties/name",
                  "type": "string",
                  "title": "Node Name",
                  "default": "",
                  "examples": [
                    "Left Door"
                  ],
                  "pattern": "^(.*)$"
                },
                "nodeType": {
                  "$id": "#/items/properties/nodes/items/properties/nodeType",
                  "type": "string",
                  "title": "Node Type",
                  "description": "Examples: door, elevator, event, eye, gray, green, item, vertical",
                  "default": "",
                  "examples": [
                    "door",
                    "entrance",
                    "exit",
                    "event",
                    "item"
                  ],
                  "enum": [
                    "door",
                    "entrance",
                    "exit",
                    "event",
                    "item",
                    "junction"
                  ],
                  "pattern": "^(.*)$"
                },
                "nodeSubType": {
                  "$id": "#/items/properties/nodes/items/properties/nodeSubType",
                  "type": "string",
                  "title": "Node SubType",
                  "default": "",
                  "examples": [
                    "boss",
                    "chozo",
                    "hidden",
                    "visible"
                  ],
                  "enum": [
                    "boss",
                    "chozo",
                    "flag",
                    "hidden",
                    "visible",

                    "blue",
                    "doorway",
                    "elevator",
                    "eye",
                    "gray",
                    "green",
                    "grey",
                    "one-way",
                    "passage",
                    "red",
                    "sandpit",
                    "vertical",
                    "yellow",

                    "junction",

                    "chest",
                    "dash",
                    "dig",
                    "standing",
                    "tablet"
                  ],
                  "pattern": "^(.*)$"
                },
                "nodeItem": {
                  "$id": "#/items/properties/nodes/items/properties/nodeItem",
                  "type": "string",
                  "title": "Vanilla Item",
                  "description": "Item that normally resides at this node in Vanilla"
                },
                "nodeAddress": {
                  "$id": "#/items/properties/nodes/items/properties/nodeAddress",
                  "type": "string",
                  "title": "Memory Address",
                  "description": "Memory address of this location",
                  "examples": ["0x0019852", "0x001985e"]
                },
                "interactionRequires": {
                  "$ref" : "#definitions/logicalRequirements",
                  "title": "Interaction Requirements",
                  "description": "Equipment, tech, and flag requirements to interact with this node once it has been reached. This is separate from one-time unlock requirements."
                },
                "sparking": {
                  "$id": "#/items/properties/nodes/items/properties/sparking",
                  "type": "object",
                  "title": "Shinespark capabilities of this Room",
                  "additionalProperties": false,
                  "properties": {
                    "runways": {
                      "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways",
                      "type": "array",
                      "title": "Runways",
                      "items": {
                        "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items",
                        "type": "object",
                        "title": "Runway Object",
                        "additionalProperties": false,
                        "required": [
                          "length",
                          "openEnd",
                          "strats"
                        ],
                        "properties": {
                          "length": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/length",
                            "type": "integer",
                            "title": "Length",
                            "description": "Length of this Runway"
                          },
                          "gentleUpTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/gentleUpTiles",
                            "type": "integer",
                            "title": "Gentle Up Tiles",
                            "description": "Number of tiles in the runway that gently slope (half a vertical tile) upwards (when running towards the door)"
                          },
                          "gentleDownTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/gentleDownTiles",
                            "type": "integer",
                            "title": "Gentle Down Tiles",
                            "description": "Number of tiles in the runway that gently slope (half a vertical tile) downwards (when running towards the door)"
                          },
                          "steepUpTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/steepUpTiles",
                            "type": "integer",
                            "title": "Steep Up Tiles",
                            "description": "Number of tiles in the runway that steeply slope (one vertical tile) upwards (when running towards the door)"
                          },
                          "steepDownTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/steepDownTiles",
                            "type": "integer",
                            "title": "Steep Down Tiles",
                            "description": "Number of tiles in the runway that steeply slope (one vertical tile) downwards (when running towards the door)"
                          },
                          "startingDownTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/startingDownTiles",
                            "type": "integer",
                            "title": "Starting Down Tiles",
                            "description": "Number of tiles at the start of the runway (away from the door) that slope down, preventing a stutter"
                          },
                          "endingUpTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/endingUpTiles",
                            "type": "integer",
                            "title": "Ending Up Tiles",
                            "description": "Number of tiles at the end of the runway (at the door) that slope up, preventing a stutter when starting a run in the other direction"
                          },
                          "strats": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/strats",
                            "type": "array",
                            "title": "Runway Strats",
                            "description": "An array of strats that can be executed to use this runway.",
                            "items": {
                              "$ref" : "#/definitions/strat",
                              "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/strats/items"
                            }
                          },
                          "usableComingIn": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/usableComingIn",
                            "type": "boolean",
                            "title": "Usable Coming In",
                            "description": "Indicates whether this runway is usable when coming in from the connected door.",
                            "default": true
                          },
                          "openEnd": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/runways/items/properties/openEnd",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 1,
                            "title": "Number of Open Ends",
                            "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room.",
                            "default": 1
                          },
                          "note": {
                            "$ref" : "#definitions/note"
                          }
                        }
                      }
                    },
                    "canLeaveCharged": {
                      "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged",
                      "type": "array",
                      "title": "Can Leave Charged",
                      "description": "An array of ways Samus can leave through this door with a shinespark charge (or an active shinespark).",
                      "items": {
                        "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/items",
                        "type": "object",
                        "title": "canLeaveCharged Object",
                        "required": [
                          "framesRemaining",
                          "usedTiles",
                          "openEnd",
                          "strats"
                        ],
                        "additionalProperties": false,
                        "properties": {
                          "usedTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/usedTiles",
                            "type": "integer",
                            "title": "Used Tiles",
                            "description": "The number of tiles that are available to charge a shinespark"
                          },
                          "framesRemaining": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/framesRemaining",
                            "type": "integer",
                            "title": "Frames Remaining",
                            "description": "The number of frames remaining in the shinespark charge when leaving the room. If this is 0, Samus leaves the room shinesparking."
                          },
                          "shinesparkFrames": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/shinesparkFrames",
                            "type": "integer",
                            "title": "Shinespark Frames",
                            "description": "If this requires shinespark out of the room, indicates how many frames that shinespark on the way out will last"
                          },
                          "initiateAt": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/initiateAt",
                            "type": "integer",
                            "title": "Node to initiate at",
                            "description": "The ID of the node where Samus must be to begin the execution of this canLeaveCharged"
                          },
                          "strats": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/strats",
                            "type": "array",
                            "title": "Leave Charged Strats",
                            "description": "An array of strats that can be executed to leave the room charged.",
                            "items": {
                              "$ref" : "#/definitions/strat",
                              "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/strats/items"
                            }
                          },
                          "openEnd": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/openEnd",
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 2,
                            "title": "Number of Open Ends",
                            "description": "The number of open ends in the runway. An open end is a runway edge that ends in a dropoff rather than a wall. Each open end adds a bit of extra room."
                          },
                          "gentleUpTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/gentleUpTiles",
                            "type": "integer",
                            "minimum": 0,
                            "title": "Gentle Up Tiles",
                            "description": "The number of tiles (among the used tiles) that slope gently upward (going up by half a tile)."
                          },
                          "gentleDownTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/gentleDownTiles",
                            "type": "integer",
                            "minimum": 0,
                            "title": "Gentle Down Tiles",
                            "description": "The number of tiles (among the used tiles) that slope gently downward (going down by half a tile)."
                          },
                          "steepUpTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/steepUpTiles",
                            "type": "integer",
                            "minimum": 0,
                            "title": "Steep Up Tiles",
                            "description": "The number of tiles (among the used tiles) that slope steeply upward (going up by a tile)."
                          },
                          "steepDownTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/steepDownTiles",
                            "type": "integer",
                            "minimum": 0,
                            "title": "Steep Down Tiles",
                            "description": "The number of tiles (among the used tiles) that slope steeply downward (going down by a tile)."
                          },
                          "startingDownTiles": {
                            "$id": "#/items/properties/nodes/items/properties/sparking/properties/canLeaveCharged/properties/startingDownTiles",
                            "type": "integer",
                            "minimum": 0,
                            "title": "Starting Down Tiles",
                            "description": "The number of tiles (among the used tiles) that slope downwards at the start of a run, preventing the execution of a stutter."
                          },
                          "note": {
                            "$ref" : "#definitions/note"
                          }
                        }
                      }
                    },
                    "note": {
                      "$ref" : "#definitions/note"
                    }
                  }
                },
                "spawnAt": {
                  "$id": "#/items/properties/nodes/items/properties/spawnAt",
                  "type": "integer",
                  "title": "Node to spawn at",
                  "description": "ID of the node at which Samus spawns when entering a room through this node. If this is null, Samus just spawns at the node she entered through",
                  "default": null
                },
                "locks": {
                  "$id": "#/items/properties/nodes/items/properties/locks",
                  "type": [
                    "array",
                    "null"
                  ],
                  "title": "Node Locks",
                  "description": "An array of corresponding lock and unlock conditions for this node",
                  "default": null,
                  "items": {
                    "$id": "#/items/properties/nodes/items/properties/locks/items",
                    "type": "object",
                    "title": "Lock Object",
                    "description": "Contains corresponding lock and unlock conditions for a node. If lock condition is missing, the lock is initially active.",
                    "required": [ "lockType", "unlockStrats" ],
                    "additionalProperties": false,
                    "properties": {
                      "lockType": {
                        "$id": "#/items/properties/nodes/items/properties/locks/items/properties/lockType",
                        "type": "string",
                        "title": "Lock Type",
                        "default": "",
                        "enum": [
                          "bossFight",
                          "coloredDoor",
                          "cutscene",
                          "escapeFunnel",
                          "gameFlag",
                          "killEnemies",
                          "permanent",
                          "triggeredEvent"
                        ],
                        "pattern": "^(.*)$"
                      },
                      "lock": {
                        "$ref" : "#definitions/logicalRequirements",
                        "$id": "#/items/properties/nodes/items/properties/locks/items/properties/lock",
                        "title": "Lock Requirements",
                        "description": "Equipment, tech, and flag requirements for this node to be locked"
                      },
                      "unlockStrats": {
                        "$id": "#/items/properties/nodes/items/properties/locks/items/properties/unlockStrats",
                        "type": "array",
                        "title": "Unlock Strats",
                        "description": "An array of strats that can be used to unlock the lock.",
                        "items": {
                          "$ref" : "#/definitions/strat",
                          "$id": "#/items/properties/nodes/items/properties/locks/items/properties/unlockStrats/items"
                        }
                      },
                      "bypassStrats": {
                        "$id": "#/items/properties/nodes/items/properties/locks/items/properties/bypassStrats",
                        "type": "array",
                        "title": "Bypass Strats",
                        "description": "An array of strats that can be used to bypass the lock, going through it without unlocking it.",
                        "items": {
                          "$ref" : "#/definitions/strat",
                          "$id": "#/items/properties/nodes/items/properties/locks/items/properties/bypassStrats/items"
                        }
                      },
                      "note": {
                        "$ref" : "#definitions/note"
                      }
                    }
                  }
                },
                "utility": {
                  "$id": "#/items/properties/nodes/items/properties/utility",
                  "type": [
                    "array",
                    "null"
                  ],
                  "title": "Utilities",
                  "description": "Helping stations at this Node (such as save, refills, or map station)",
                  "items": {
                    "$id": "#/items/properties/nodes/items/properties/utility/items",
                    "type": "string",
                    "enum": [
                      "save",
                      "missile",
                      "super",
                      "powerbomb",
                      "energy",
                      "reserve",
                      "map"
                    ]
                  }
                },
                "view": {
                  "$id": "#/items/properties/nodes/items/properties/view",
                  "type": [
                    "array",
                    "null"
                  ],
                  "title": "View Requirements",
                  "description": "Equipment, tech, and flag requirements to view this node within Room",
                  "items": {
                    "$id": "#/items/properties/nodes/items/properties/view/items",
                    "type": [
                      "object",
                      "string"
                    ],
                    "title": "Elements are assumed to be ANDed together, unless this array has a key of 'or'"
                  }
                },
                "yields": {
                  "$id": "#/items/properties/nodes/items/properties/yields",
                  "type": "array",
                  "title": "This Node grants an ability/flag"
                },
                "note": {
                  "$ref" : "#definitions/note"
                }
              }
            }
          },
          "links": {
            "$id": "#/items/properties/links",
            "type": "array",
            "title": "Links; pathways within the Room",
            "items": {
              "$id": "#/items/properties/links/items",
              "type": "object",
              "title": "Link",
              "required": [
                "from",
                "to"
              ],
              "additionalProperties": false,
              "properties": {
                "from": {
                  "$id": "#/items/properties/links/items/properties/from",
                  "type": "integer",
                  "title": "This Link originates at this Node ID within the Room",
                  "default": 0,
                  "examples": [
                    1
                  ]
                },
                "to": {
                  "$id": "#/items/properties/links/items/properties/to",
                  "type": [
                    "array",
                    "null"
                  ],
                  "title": "This Link terminates at this Node ID within the Room",
                  "items": {
                    "$id": "#/items/properties/links/items/properties/to/items",
                    "type": "object",
                    "title": "The Items Schema",
                    "required": [
                      "id",
                      "strats"
                    ],
                    "additionalProperties": false,
                    "properties": {
                      "id": {
                        "$id": "#/items/properties/links/items/properties/to/items/properties/id",
                        "type": "integer",
                        "title": "Target Node ID within the Room",
                        "default": 0,
                        "examples": [
                          2
                        ]
                      },
                      "strats": {
                        "$id": "#/items/properties/links/items/properties/to/items/properties/strats",
                        "type": "array",
                        "title": "Link Strats",
                        "description": "An array of strats that can be used to cross the link.",
                        "items": {
                          "$ref" : "#/definitions/strat",
                          "$id": "#/items/properties/links/items/properties/to/items/properties/strats/items"
                        }
                      },
                      "yields": {
                        "$id": "#/items/properties/links/items/properties/to/items/properties/yields",
                        "type": "array",
                        "title": "This Link grants an ability/flag"
                      },
                      "note": {
                        "$ref" : "#definitions/note"
                      }
                    }
                  }
                }
              }
            }
          },
          "obstacles": {
            "$id": "#/items/properties/obstacles",
            "type": "array",
            "title": "Obstacles; Things that block your way and can be destroyed, not respawning until the room is reset",
            "items": {
              "$id": "#/items/properties/obstacles/items",
              "type": "object",
              "title": "Obstacle",
              "required": [
                "id",
                "name",
                "obstacleType"
              ],
              "additionalProperties": false,
              "properties": {
                "id": {
                  "$id": "#/items/properties/obstacles/items/properties/id",
                  "type": "string",
                  "title": "Obstacle ID within Room. To reduce confusion with nodes, this should be a one-letter String",
                  "default": "",
                  "examples": ["A", "B"]
                },
                "name": {
                  "$id": "#/items/properties/obstacles/items/properties/name",
                  "type": "string",
                  "title": "Obstacle Name",
                  "default": "",
                  "examples": [
                    "Top Crumble Blocks"
                  ],
                  "pattern": "^(.*)$"
                },
                "obstacleType": {
                  "$id": "#/items/properties/obstacles/items/properties/obstacleType",
                  "type": "string",
                  "title": "Obstacle Type",
                  "description": "The main type of obstacle. Examples include 'inanimate' and 'enemies'",
                  "default": "",
                  "examples": [
                    "inanimate",
                    "enemies"
                  ],
                  "enum": [
                    "inanimate",
                    "enemies"
                  ],
                  "pattern": "^(.*)$"
                },
                "note": {
                  "$ref" : "#definitions/note"
                },
                "requires": {
                  "$ref" : "#definitions/logicalRequirements",
                  "title": "Absolute Obstacle Requirements",
                  "description": "Equipment, tech, and flag requirements that are always needed to break this obstacle. Those are applied on top of any requirements specified on an `obstacle` logical element that references this obstacle."
                }
              }
            }
          },
          "enemies": {
            "$id": "#/items/properties/enemies",
            "type": "array",
            "title": "Enemies; Things that try to kill you.",
            "items": {
              "$id": "#/items/properties/enemies/items",
              "type": "object",
              "title": "Enemies",
              "required": [
                "name",
                "quantity"
              ],
              "oneOf": [
                { "required":
                  [ "homeNodes" ]
                },
                { "required":
                  [ "betweenNodes" ]
                }
              ],
              "additionalProperties": false,
              "properties": {
                "name": {
                  "$id": "#/items/properties/enemies/items/properties/name",
                  "type": "string",
                  "title": "Enemy name",
                  "default": "",
                  "examples": [
                    "Kihunter (green)"
                  ]
                },
                "quantity": {
                  "$id": "#/items/properties/enemies/items/properties/quantity",
                  "type": "integer",
                  "title": "Quantity",
                  "default": "",
                  "examples": [
                    3
                  ]
                },
                "homeNodes": {
                  "$id": "#/items/properties/enemies/items/properties/homeNodes",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "title": "Home Nodes",
                  "description": "At what nodes enemies normaly engage you",
                  "default": [],
                  "examples": [
                    [1, 2]
                  ]
                },
                "betweenNodes": {
                  "$id": "#/items/properties/enemies/items/properties/betweenNodes",
                  "type": "array",
                  "items": {
                    "type": "integer"
                  },
                  "title": "Enemies between nodes",
                  "description": "Enemies can only be reached while traveling between these two nodes",
                  "default": [],
                  "minItems": 2,
                  "maxItems": 2,
                  "examples": [
                    [1, 2]
                  ]
                },
                "spawn": {
                  "$ref" : "#definitions/logicalRequirements",
                  "title": "Spawn Requirements",
                  "description": "Equipment, tech, and flag requirements for this enemy to spawn. If null, enemy can spawn from game start."
                },
                "stopSpawn": {
                  "$ref" : "#definitions/logicalRequirements",
                  "title": "Stop Spawning Requirements",
                  "description": "Equipment, tech, and flag requirements for this enemy to stop spawning. If null, enemy can always spawn once its spawn requirements have been met."
                },
                "dropRequires": {
                  "$ref" : "#definitions/logicalRequirements",
                  "title": "Drop Requires",
                  "description": "Equipment, tech, and flag requirements that are needed to obtain the drop from this enemy without taking any damage. These go on top of what's needed to reach and kill the enemy."
                },
                "note": {
                  "$ref" : "#definitions/note"
                }
              }
            }
          }
        }
      }
    }
  }
}
